pipeline {
    agent any

    environment {
        MONGO_URI = credentials('MONGO_URI')
        JWT_SECRET = credentials('JWT_SECRET')

        GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID')
        GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')

        EMAIL_USERNAME = credentials('EMAIL_USERNAME')
        EMAIL_PASSWORD = credentials('EMAIL_PASSWORD')

        FACEBOOK_APP_ID = credentials('FACEBOOK_APP_ID')
        FACEBOOK_APP_SECRET = credentials('FACEBOOK_APP_SECRET')

        GOOGLE_CALENDAR_CLIENT_ID = credentials('GOOGLE_CALENDAR_CLIENT_ID')
        GOOGLE_CALENDAR_CLIENT_SECRET = credentials('GOOGLE_CALENDAR_CLIENT_SECRET')
        GOOGLE_CALENDAR_REDIRECT_URI = "http://localhost:3001/api/calendar/callback"

        GEMINI_API_KEY = credentials('GEMINI_API_KEY')
        VITE_API_URL = "http://localhost:3000"

        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
        serverImage = "nodemongoapp"
        clientImage = "client"
        adminImage = "admin"
        imageTag = "6.0"
    }

    stages {
        stage('Build Docker images') {
            steps {
                echo "Building Docker images for Server, Client, and Admin..."
                sh 'docker-compose build'
            }
        }

        stage('Push to Nexus') {
    steps {
        script {
            docker.withRegistry("http://${registry}", registryCredentials) {
                echo "Pushing Server image..."
                sh "docker push ${registry}/${serverImage}:${imageTag}"

                echo "Pushing Client image..."
                sh "docker push ${registry}/${clientImage}:${imageTag}"

                echo "Pushing Admin image..."
                sh "docker push ${registry}/${adminImage}:${imageTag}"
            }
        }
    }
}

        
        stage('Deploy Application') { 
            steps { 
                script { 
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        echo "Pulling Server, Client, and Admin images from Nexus..."
                        sh "docker pull ${registry}/${serverImage}:${imageTag}"
                        sh "docker pull ${registry}/${clientImage}:${imageTag}"
                        sh "docker pull ${registry}/${adminImage}:${imageTag}"

                        echo "Starting Docker containers using Docker Compose..."
                        sh "docker-compose down"  // Stop any running instances to avoid conflicts
                        sh "docker-compose up -d"
                    } 
                } 
            }
        }
    }
}
